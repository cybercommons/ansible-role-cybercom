---
- name: Create Application and Log Directory
  file:
    path: '{{ item }}'
    state: directory
    mode: 0775
  with_items:
    - '{{ application_install_directory }}/{{ application_short_name }}'
    - '{{ application_install_directory }}/{{ application_short_name }}/log'

- name: Copy data directory within cyberCommons
  copy:
    src: '../files/{{ item }}'
    dest: '{{ application_install_directory }}/{{ application_short_name }}/'
    mode: 0775
  with_items:
   - data

- name: Setup cyberCommons directory structure
  file:
    path: '{{ application_install_directory }}/{{ application_short_name }}/{{ item.path }}'
    state: directory
  with_filetree: '../templates/cybercom'
  when: item.state == 'directory'

- name: Set up cyberCommons config templates
  template:
    src: '{{ item.src }}'
    dest: '{{ application_install_directory }}/{{ application_short_name }}/{{ item.path }}'
  with_filetree: '../templates/cybercom'
  when: item.state == 'file'

- name: Copy db.sqlite3 to config folder
  copy:
    src: '../files/{{ item }}'
    dest: '{{ application_install_directory }}/{{ application_short_name }}/config/'
  with_items:
   - "db.sqlite3"

- name: Git clone cybercom-api and cybercom-portal.
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
    version: "{{ item.version }}"
  with_items:
    - repo: 'https://github.com/cybercommons/cybercom-portal'
      dest: '{{ application_install_directory }}/{{ application_short_name }}/data/static/portal'
      version: 'master'
    - repo: 'https://github.com/cybercommons/cybercom-api'
      dest: '{{ application_install_directory }}/{{ application_short_name }}/api_code'
      version: 'master'

- name: Generate keystoresecret.
  lineinfile:
    path: '{{ application_install_directory }}/{{ application_short_name }}/config/ssl/backend/keystoresecret'
    create: yes
    line: "{{ lookup('password','/tmp/keystoresecret chars=ascii_lowercase,ascii_uppercase,digits length=32') }}"
    insertbefore: BOF

- name: Clean up and remove temp files.
  file:
    path: '/tmp/{{ item }}'
    state: absent
  with_items:
    - keystoresecret

- name: change permissions
  file:
    path: "{{ item }}"
    mode: 0754
  with_items:
    - '{{ application_install_directory }}/{{ application_short_name }}/run/genSSLKeys'
    - '{{ application_install_directory }}/{{ application_short_name }}/run/cybercom_up'
    - '{{ application_install_directory }}/{{ application_short_name }}/run/appContainerKill'
    - '{{ application_install_directory }}/{{ application_short_name }}/run/resetDBCreds'
    - '{{ application_install_directory }}/{{ application_short_name }}/run/dbShell'
    - '{{ application_install_directory }}/{{ application_short_name }}/config/ssl/backend/generate'
    - '{{ application_install_directory }}/{{ application_short_name }}/config/ssl/nginx/generate'
    - '{{ application_install_directory }}/{{ application_short_name }}/config/ssl/nginx/runLetsEncrypt'
    - '{{ application_install_directory }}/{{ application_short_name }}/config/addmongouser'

- name: Build openssl docker image and generate ssl keys.
  shell: '{{ item }}'
  args:
    chdir: '{{ application_install_directory }}/{{ application_short_name }}/'
  with_items:
    - 'docker build --rm -t cybercom/openssl config/ssl/openssl/'
    - 'run/genSSLKeys'
    - 'docker build -t api api_code/'

- name: "Build LetsEncrpt container and retrieve certs. If variable use_ssl == 'LetsEncrypt'"
  command: '{{ item }}'
  args:
    chdir: '{{ application_install_directory }}/{{ application_short_name }}/'
  when: use_ssl == 'LetsEncrypt'
  register: letsEncrpt_check
  failed_when: letsEncrpt_check.rc > 0
  with_items:
    - 'docker build --rm -t certbot config/ssl/nginx/letsencrypt/dockerfiles'

- name: "Generate SSL Certs. If variable genCerts == True. Please double check cert creation.
         Run framework and check Nginx logs if docker container failed.
         If fail, rerun config/ssl/nginx/runLetsEncrypt"
  command: '{{ item }}'
  args:
    chdir: '{{ application_install_directory }}/{{ application_short_name }}/'
  when: (use_ssl == 'LetsEncrypt') and (genCerts)
  register: letsEncrpt_check
  failed_when: letsEncrpt_check.rc > 0
  with_items:
    - '{{ application_install_directory }}/{{ application_short_name }}/config/ssl/nginx/runLetsEncrypt'
