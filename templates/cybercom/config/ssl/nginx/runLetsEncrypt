#!/bin/bash

if [ -f {{application_install_directory}}/{{application_short_name}}/config/thisisfirstrun ]
  then
    # bootstrap webserver for initial cert creation
    docker run {{ docker_privileged }} -d --name certbot_nginx \
      -p 80:80 \
      -v {{application_install_directory}}/{{application_short_name}}/config/ssl/nginx/letsencrypt/nginx-bootstrap.conf:/etc/nginx/conf.d/default.conf:z \
      -v {{application_install_directory}}/{{application_short_name}}/config/ssl/nginx/letsencrypt:/letsencrypt:z \
      nginx

    sleep 5

    # run certbot
    docker run {{ docker_privileged }} -it --rm \
      -v {{application_install_directory}}/{{application_short_name}}/config/ssl/nginx/letsencrypt/etc:/etc/letsencrypt:z \
      -v {{application_install_directory}}/{{application_short_name}}/config/ssl/nginx/letsencrypt/www:/www:z \
      certbot

    # remove temporary webserver
    docker stop certbot_nginx
    docker rm certbot_nginx

  else # not first run

    # run certbot
    docker run {{ docker_privileged }} -it --rm \
      -v {{application_install_directory}}/{{application_short_name}}/config/ssl/nginx/letsencrypt/etc:/etc/letsencrypt:z \
      -v {{application_install_directory}}/{{application_short_name}}/config/ssl/nginx/letsencrypt/www:/www:z \
      certbot

    # reload nginx configs if above exits with 0 - this can also happen if the script is canceled by the user
    if [ $? == 0 ]
      then
        #reload nginx configs without restarting
        echo "<<<< Reloading Nginx Configs >>>>"
        docker exec -it {{application_short_name}}_nginx nginx -s reload
  fi
fi
